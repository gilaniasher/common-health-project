{"version":3,"sources":["actions/AdminActions.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["endpoint","Container","styled","div","FormContainer","loader","css","Login","props","state","username","useRef","password","TextField","label","variant","inputRef","type","Button","size","color","onClick","current","value","console","log","setLoading","setLoggedIn","url","URLSearchParams","fetch","method","then","res","status","catch","login","loading","FormTitle","span","FormRow","LoadingForm","counties","App","useState","loggedIn","unassignedLoading","setUnassignedLoading","assignKitRows","setAssignKitRows","scheduleRounds","roundNum","startDate","endDate","scheduleKitDates","county","kitDropoff","kitPickup","assignmentRoundNum","assignKits","initGetUnassignedUsers","roundNumber","json","unassignedUsers","getUnassignedUsers","unassigned","newAssignKitRows","map","user","id","name","kitsDesired","useEffect","defaultValue","params","JSON","stringify","err","select","option","MenuItem","key","kitDropoffDate","kitPickupDate","style","marginLeft","marginTop","Table","TableHead","TableRow","TableCell","TableBody","row","c","Object","keys","length","kitAssignment","body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.46efe3b7.chunk.js","sourcesContent":["const endpoint = 'https://obxbkf8dsb.execute-api.us-east-2.amazonaws.com/Prod'\r\n\r\nexport const login = (username, password, setLoggedIn, setLoading) => {\r\n    const url = `${endpoint}/AdminLogin?` + new URLSearchParams({ username, password })\r\n\r\n    fetch(url, { method: 'POST' })\r\n        .then((res) => {\r\n            if (res.status === 200) {\r\n                console.log('Logging in')\r\n                setLoggedIn(true)\r\n                setLoading(false)\r\n            } else {\r\n                console.log('Failed to log in')\r\n                setLoggedIn(false)\r\n                setLoading(false)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('Log in request failed')\r\n            setLoggedIn(false)\r\n            setLoading(false)\r\n        })\r\n}\r\n\r\nexport const scheduleRounds = ({ roundNum, startDate, endDate }) => {\r\n    const url = `${endpoint}/AddRound?` + new URLSearchParams({\r\n        roundNum,\r\n        startDate,\r\n        endDate\r\n    })\r\n\r\n    fetch(url, { method: 'POST' })\r\n        .then(() => console.log('Round added'))\r\n        .catch(err => console.log(`Could not add new round: ${err}`))\r\n}\r\n\r\nexport const scheduleKitDates = ({ roundNum, county, kitDropoffDate, kitPickupDate }) => {\r\n    const url = `${endpoint}/ScheduleDates?` + new URLSearchParams({\r\n        roundNum,\r\n        county,\r\n        kitDropoffDate,\r\n        kitPickupDate\r\n    })\r\n\r\n    fetch(url, { method: 'POST' })\r\n        .then(() => console.log('Scheduled Dates'))\r\n        .catch(err => console.log(`Could not schedule dates: ${err}`))\r\n}\r\n\r\nexport const assignKits = (kitAssignment, roundNumber) => {\r\n    const url = `${endpoint}/AssignKits?` + new URLSearchParams({ roundNumber })\r\n\r\n    return fetch(url, { method: 'POST', body: JSON.stringify(kitAssignment)})\r\n        .then((res) => {\r\n            if (res.status === 200) {\r\n                console.log('Succesfully updated kit assignment')\r\n            } else {\r\n                console.log('Failed to submit kit assignment')\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('Kit assignment request failed')\r\n        })\r\n}\r\n\r\nexport const getUnassignedUsers = (roundNumber) => {\r\n    const url = `${endpoint}/GetUnassignedUsers?` + new URLSearchParams({ roundNumber })\r\n\r\n    return fetch(url)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            return json.unassignedUsers\r\n        })\r\n        .catch(() => {\r\n            console.log('Failed to load in unassigned users')\r\n            return []\r\n        })\r\n}\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport { login } from './actions/AdminActions'\r\n\r\nimport PacmanLoader from 'react-spinners/PacmanLoader'\r\nimport { css } from '@emotion/core'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 4%;\r\n`\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  padding: 3%;\r\n  align-items: center;\r\n`\r\n\r\nconst loader = css`\r\n  margin-top: 3%;\r\n  margin-right: 100px;\r\n`\r\n\r\nconst Login = (props) => {\r\n  const state = {\r\n    username: useRef(''),\r\n    password: useRef('')\r\n  }\r\n\r\n  const initLogin = () => {\r\n    if (state.username.current.value === '' || state.password.current.value === '') {\r\n      console.log('Username or password is empty')\r\n    } else {\r\n      props.setLoading(true)\r\n      login(state.username.current.value, state.password.current.value, props.setLoggedIn, props.setLoading)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <span>Login to CHP Admin Interface</span>\r\n\r\n      <FormContainer>\r\n        <TextField label='Username' variant='filled' inputRef={state.username} />\r\n        <TextField label='Password' variant='filled' type='password' inputRef={state.password} />\r\n      </FormContainer>\r\n\r\n      <Button size='large' color='primary' onClick={initLogin}>\r\n        Login\r\n      </Button>\r\n\r\n      <PacmanLoader\r\n        css={loader}\r\n        size={30}\r\n        color='#123abc'\r\n        loading={props.loading}\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport BeatLoader from 'react-spinners/BeatLoader'\r\nimport './App.css'\r\nimport Login from './Login'\r\n\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\n\r\nimport { scheduleRounds, scheduleKitDates, assignKits, getUnassignedUsers } from './actions/AdminActions'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 4%;\r\n`\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  padding: 5%;\r\n  width: 100%;\r\n  align-items: center;\r\n`\r\n\r\nconst FormTitle = styled.span`\r\n  align-self: flex-start;\r\n  font-size: 20px;\r\n  padding-bottom: 2%;\r\n`\r\n\r\nconst FormRow = styled.div`\r\n  display: flex;\r\n  padding-top: 2%;\r\n  padding-bottom: 2%;\r\n`\r\n\r\nconst LoadingForm = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n`\r\n\r\nconst createRow = (id, name, kitsDesired) => {\r\n  return { id, name, kitsDesired }\r\n}\r\n\r\nconst counties = [\r\n  'Morris', 'Bergen', 'Middlesex', 'Essex/Passaic', 'Union'\r\n]\r\n\r\nconst App = () => {\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [unassignedLoading, setUnassignedLoading] = useState(false)\r\n  const [assignKitRows, setAssignKitRows] = useState([])\r\n\r\n  const state = {\r\n    scheduleRounds: { roundNum: useRef(), startDate: useRef(), endDate: useRef() },\r\n    scheduleKitDates: { roundNum: useRef(), county: useRef(), kitDropoff: useRef(), kitPickup: useRef() },\r\n    assignmentRoundNum: useRef(''),\r\n    assignKits: {}\r\n  }\r\n\r\n  const initScheduleRounds = () => {\r\n    const params = {\r\n      'roundNum': state.scheduleRounds.roundNum.current.value,\r\n      'startDate': state.scheduleRounds.startDate.current.value,\r\n      'endDate': state.scheduleRounds.endDate.current.value\r\n    }\r\n\r\n    console.log('scheduling rounds', JSON.stringify(params, null, 2))\r\n    scheduleRounds(params)\r\n  }\r\n\r\n  const initScheduleKitDates = () => {\r\n    const params = {\r\n      'roundNum': state.scheduleKitDates.roundNum.current.value,\r\n      'county': state.scheduleKitDates.county.current.value,\r\n      'kitDropoffDate': state.scheduleKitDates.kitDropoff.current.value,\r\n      'kitPickupDate': state.scheduleKitDates.kitPickup.current.value\r\n    }\r\n\r\n    console.log('scheduling kit dates', JSON.stringify(params, null, 2))\r\n    scheduleKitDates(params)\r\n  }\r\n\r\n  const initAssignKits = () => {\r\n    console.log('Assigning kits')\r\n    let roundNum = ''\r\n    let params = {}\r\n\r\n    if (state.assignmentRoundNum.current !== '')\r\n      roundNum = state.assignmentRoundNum.current.value\r\n\r\n    for (const id in state.assignKits) {\r\n      if (state.assignKits[id].value !== '') {\r\n        params[id] = state.assignKits[id].value + '0'\r\n      }\r\n    }\r\n\r\n    console.log(JSON.stringify(params, null, 2))\r\n\r\n    if (Object.keys(params).length !== 0) {\r\n      assignKits(params, roundNum).then(() => {\r\n        initGetUnassignedUsers()\r\n      })\r\n    }\r\n  }\r\n\r\n  const initGetUnassignedUsers = () => {\r\n    setUnassignedLoading(true)\r\n    let roundNum = ''\r\n\r\n    if (state.assignmentRoundNum.current !== '')\r\n      roundNum = state.assignmentRoundNum.current.value\r\n\r\n    getUnassignedUsers(roundNum).then((unassigned) => {\r\n      const newAssignKitRows = unassigned.map(user => createRow(user[0], user[1], user[2]))\r\n      state.assignKits = {}\r\n      setAssignKitRows(newAssignKitRows)\r\n      setUnassignedLoading(false)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Load in unassigned constructors into the bottom table\r\n    if (loggedIn) {\r\n      initGetUnassignedUsers()\r\n    }\r\n  }, [loggedIn])\r\n\r\n  return (\r\n    loggedIn ?\r\n      <Container>\r\n        <span>CHP Admin Interface</span>\r\n\r\n        <FormContainer>\r\n          <FormTitle>Schedule Rounds</FormTitle>\r\n\r\n          <FormRow>\r\n            <TextField label='Round #' variant='filled' inputRef={state.scheduleRounds.roundNum} />\r\n            <TextField label='Start Date' variant='filled' type='date' defaultValue='2020-07-25' inputRef={state.scheduleRounds.startDate} />\r\n            <TextField label='End Date' variant='filled' type='date' defaultValue='2020-07-25' inputRef={state.scheduleRounds.endDate} />\r\n          </FormRow>\r\n\r\n          <Button size='large' color='primary' onClick={initScheduleRounds}>\r\n            Submit\r\n          </Button>\r\n        </FormContainer>\r\n\r\n        <FormContainer>\r\n          <FormTitle>Schedule Kit Dropoff/Pickup Dates</FormTitle>\r\n\r\n          <FormRow>\r\n            <TextField label='Round #' variant='filled' inputRef={state.scheduleKitDates.roundNum} />\r\n\r\n            <TextField label='County' select variant='filled' defaultValue='Morris' inputRef={state.scheduleKitDates.county} >\r\n              {counties.map(option =>\r\n                <MenuItem key={option} value={option}>{option}</MenuItem>)\r\n              }\r\n            </TextField>\r\n\r\n            <TextField label='Kit Dropoff Date' variant='filled' type='date' defaultValue='2020-07-25' inputRef={state.scheduleKitDates.kitDropoff} />\r\n            <TextField label='Kit Pickup Date' variant='filled' type='date' defaultValue='2020-07-25' inputRef={state.scheduleKitDates.kitPickup} />\r\n          </FormRow>\r\n\r\n          <Button size='large' color='primary' onClick={initScheduleKitDates} >\r\n            Submit\r\n          </Button>\r\n        </FormContainer>\r\n\r\n        <FormContainer>\r\n          <LoadingForm>\r\n            <FormTitle>Assign Kits for Round</FormTitle>\r\n            <TextField label='Round Number' inputRef={state.assignmentRoundNum} style={{ marginLeft: '2%', marginTop: '-1.5%' }} />\r\n            <Button size='large' color='primary' onClick={initGetUnassignedUsers}>Go</Button>\r\n            <BeatLoader\r\n              size={20}\r\n              color='#123abc'\r\n              loading={unassignedLoading}\r\n            />\r\n          </LoadingForm>\r\n\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>ID</TableCell>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Kits Desired</TableCell>\r\n                <TableCell>Num Kits to Assign (Entries can be left blank)</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {assignKitRows.map((row) => (\r\n                <TableRow>\r\n                  <TableCell>{row.id}</TableCell>\r\n                  <TableCell>{row.name}</TableCell>\r\n                  <TableCell>{row.kitsDesired}</TableCell>\r\n                  <TableCell><TextField label='Num Kits to Assign' inputRef={(c) => { state.assignKits[row.id] = c }} /></TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n\r\n          <Button size='large' color='primary' onClick={initAssignKits}>\r\n            Submit\r\n          </Button>\r\n        </FormContainer>\r\n      </Container>\r\n    :\r\n      <Login setLoggedIn={setLoggedIn} loading={loading} setLoading={setLoading} />\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}